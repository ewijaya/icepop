#!/usr/bin/env python
""" 
Given a raw gene expression data (no treatment) 
the scripts the cell type purity content.
"""
__author__    = "Edward Wijaya <ewijaya@gmail.com>"
__copyright__ = "Copyright 2015"
import csv
import json
import argparse
import sys  
import os
import pandas as pd 
from openpyxl import load_workbook

# To be removed later
sys.path.insert(0,'/misc/u21/ewijaya/cellpopulation_framework/icepop')

from icepop import input_reader as ir
from icepop import species_cell_proportion as scp
from icepop import deconvolution as dc
from icepop import specificity as sp
from icepop import data_conversion
from icepop import draw_cellpop as dw
from icepop import correlation as cor

def float_or_str(value):
    try:
        return float(value)
    except:
        return value

    

def main():
    parser = argparse.ArgumentParser(description='''Estimate cell purities from raw expression data''')
    parser.add_argument("filename", nargs='?',help="DEGs file in TSV, CSV or Excel format") 
    parser.add_argument("-s","-species",metavar="",help="species (mouse, human)",type=str,default='mouse')
    parser.add_argument("-g","-organs",metavar="",help="organs ('no_pref','bone_marrow', etc)",type=str,default='no_pref')
    parser.add_argument("-m","-method",metavar="",help="optimization method (nnls, sqlsp)",type=str,default='nnls')
    parser.add_argument("-o","-outfile",metavar="",help="output file in stdout, JSON, TSV, Excel, PNG/JPG/SVG format (inferred from suffix). If image,  make pie chart.",type=str,default='outfile.json')
    parser.add_argument("-p",metavar="",help="gene marker specificity limit (best,[0.1, ..., 0.9])",type=float_or_str,default='best')

    args = parser.parse_args()
    raw_infile = args.filename
    species    = args.s
    organs     = args.g
    method     = args.m
    outfile    = args.o
    specif     = args.p

    cellpop_df = None
    if organs == 'no_pref':
        cellpop_df = ir.read_hdf_expr(species=species)

    else:
        cellpop_df = ir.read_hdf_expr(species=species,organs=True)
        organ_list = list(cellpop_df.columns.levels[0])
        
        if organs not in organ_list:
            organlstr = ",".join(organ_list)
            sys.exit("organs should be in this list: " + organlstr + "\n")
            sys.exit("now use *no_pref* instead \n")

        organlist  = cellpop_df.columns.values.tolist()
        cellpop_df = scp.choose_organ(cellpop_df, organs)


    # Sanity check
    if organs != 'no_pref' and species == "human":
        sys.exit("Human has no organs based proportion data.")
        

    indf = ir.read_file(raw_infile,mode="RAW")
    
    marker_df = None
    if specif == 'best':
        marker_df = sp.find_best_marker_genes(cellpop_df,verbose=False)
    else:
        marker_df = sp.find_marker_genes(cellpop_df,lim=specif)

    
    colnames = indf.columns.values.tolist()
    pivots = colnames[0:2]
    samples = colnames[2:]
    nof_samples = len(samples)
    
    all_dfs = []
    for sample in samples:
        new_df = indf[[pivots[1]] + [sample]]
        x_solved_df = dc.deconvolve_expr(mixedexp_df = new_df,cellpop_df=marker_df,method=method)
        all_dfs.append(x_solved_df) 

    merged_df = reduce(lambda ldf, rdf: pd.merge(ldf,rdf, left_index=True, right_index=True), all_dfs) 

    base, suff = None, None
    if "." in outfile:
        tmp_fnames = os.path.basename(outfile)
        base, suff = tmp_fnames.split(".")
        
    
    if suff == "json":
        merged_df_json = data_conversion.df_to_dol(merged_df)
        with open(outfile,'w') as jsonout:
            json.dump(merged_df_json, jsonout, indent=4)
    elif suff == "tsv":
        merged_df.index.names = ['Cell_type']
        merged_df.reset_index(inplace=True)
        merged_df.to_csv(outfile,sep="\t",index=False,float_format='%.3f')
    elif suff == "xlsx" or  suff == 'xls':
        merged_df.index.names = ['Cell_type']
        merged_df.reset_index(inplace=True)
        merged_df.to_excel(outfile,index=False,float_format='%.3f')
    elif suff in ['svg','jpg','png']:
        dw.pieplot_deconv(merged_df, nrows=3,ncols=4,outfile=outfile)
    elif outfile == 'stdout':
        print  merged_df


if __name__ == '__main__':
    main()
