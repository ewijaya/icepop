#!/usr/bin/env python
""" 
Scripts for calculating cell population
given differentially expressed genes.
By default it enumerates result for various fold change
threshold. Otherwise user can specify single fold change
"""
__author__    = "Edward Wijaya <ewijaya@gmail.com>"
__copyright__ = "Copyright 2015"
import csv
import json
import argparse
import pandas as pd
import sys  
import os
# To be removed later
# sys.path.insert(0,"/Users/ewijaya-macmini-ifrec/Various_Projects/CellPopulation_Framework_in_making/icepop")
sys.path.insert(0,'/misc/u21/ewijaya/cellpopulation_framework/icepop')
from icepop import draw_cellpop as dc
from icepop import input_reader as ir
from icepop import cellpop_score as cp
from icepop import species_cell_proportion as scp
from icepop import enumerate_output as eo
from icepop import utils


def float_or_str(value):
    try:
        return float(value)
    except:
        return value


def main():
    parser = argparse.ArgumentParser(description='''Cell population score for
            differentially expressed genes.''')
    parser.add_argument("filename", nargs='?',help="DEGs file in TSV, CSV or Excel format") 
    parser.add_argument("-s","-species",metavar="",help="species (mouse, human)",type=str,default='mouse')
    parser.add_argument("-g","-organs",metavar="",help="organs ('no_pref','bone_marrow', etc)",type=str,default='no_pref')
    parser.add_argument("-cv_organ",metavar="",help="organs ('no_pref','ln', 'lv','sp')",type=str,default='no_pref')
    parser.add_argument("-o","-outfile",metavar="",help="output file in stdout, JSON, PNG/JPG/SVG format",type=str,default='outfile.json')
    parser.add_argument("--gene_count", help="normalized score by gene_count",action="store_true")
    parser.add_argument("--logscale", help="perform log scale on FC or expression",action="store_true")
    parser.add_argument("--verbose", help="verbose output",action="store_true")
    parser.add_argument("-fclim", help="specify single fold change threshold",type=float_or_str,default="none")

    args = parser.parse_args()
    deg_infile = args.filename
    species    = args.s
    outfile    = args.o
    organs     = args.g
    gene_count = args.gene_count
    logscale   = args.logscale
    fc_lim     = args.fclim
    cv_filt_organ     = args.cv_organ
    verbose    = args.verbose


    if outfile == '':
        outfile = None
        
    base, suff = None, None
    if "." in outfile:
        tmp_fnames = os.path.basename(outfile)
        base, suff = tmp_fnames.split(".")

    foldchange_range=[1.5,2,2.5,3,3.5,4,4.5,5]
    fcstr = [str(x) for x in foldchange_range]
    fcstr = ",".join(fcstr)

    # Sanity check
    if organs != 'no_pref' and species == "human":
        sys.exit("Human has no organs based proportion data.")
    elif verbose:
        sys.stderr.write("Generating JSON file for the following fold changes:\n")
        sys.stderr.write(fcstr +  "\n")    
        sys.stderr.write("Species: " +  str(species) +  "\n")    
        sys.stderr.write("Output file: " +  str(out_json) +  "\n")    
        sys.stderr.write("Gene count: " +  str(gene_count) +  "\n")    
        sys.stderr.write("Logscale: " +  str(logscale) +  "\n")    

    
    indf            = ir.read_file(deg_infile, mode="DEG")
    if cv_filt_organ != 'no_pref':
        indf            = utils.cv_filter(indf, organ=cv_filt_organ)


    cellpop_df = None
    if organs == 'no_pref':
        cellpop_df = ir.read_hdf(species=species)
    else:
        cellpop_df = ir.read_hdf(species=species,organs=True)
        organ_list = list(cellpop_df.columns.levels[0])
        
        if organs not in organ_list:
            organlstr = ",".join(organ_list)
            sys.exit("organs should be in this list: " + organlstr + "\n")
            sys.exit("now *no_pref* instead \n")

        organlist = cellpop_df.columns.values.tolist()
        cellpop_df = scp.choose_organ(cellpop_df, organs)

    # print indf.head()

    if fc_lim == 'none' and suff == 'json':
        print foldchange_range
        # This full enumeration is mainly used for web app
        eo.enumerate_output(cellpop_df, indf, fc_range = foldchange_range, \
                            outfilename = outfile,  gene_count=gene_count, \
                            logscale=logscale)

    else:
        sample_ct_generank_dict, cpop_score_df, thres_dict, gene_x_ctypedf = cp.deg_cellpopscore_generank(cellpop_df,indf, fclim=fc_lim,gene_count=False,logscale=False,cpop_thres='q1std')
        sample_names = cpop_score_df.columns.values.tolist()

        sufflist = ['svg', 'jpg', 'png', 'tsv', 'xlsx', 'xls']

        sr_dict = {}
        for sample_name in sample_names:
            score_list = cpop_score_df[sample_name]
            sample_resp_score = cp.sample_response_score(score_list, method="q1std")
            sr_dict[sample_name] = sample_resp_score
            sample_resp_score   = "{:.3f}".format(sample_resp_score)
            cpop_thres          = thres_dict[sample_name]
            cpop_thres          = "{:.3f}".format(cpop_thres)
            if suff in ['svg','jpg','png']:
                ntitle = sample_name + " (CTR=" + cpop_thres + "/SR=" + sample_resp_score + ")"
                outfile_parts = outfile.split(".")
                outfile_parts.insert(-1, sample_name)
                sample_outfile =  ".".join(outfile_parts)
                sample_cpop_score_df = cpop_score_df[[sample_name]]
                dc.bar_plot(sample_cpop_score_df, outfile=sample_outfile, title=ntitle,ymin=0, ymax=0.5, y_thres = cpop_thres )
            

        all_thres_df = pd.DataFrame.from_dict({'Cell type response threshold':thres_dict, 'Sample response':sr_dict}, orient='index')
        ncpop_score_df = pd.concat([cpop_score_df, all_thres_df])
        ncpop_score_df.index.names = ['Cell_type/CRT/SR']
        ncpop_score_df.reset_index(inplace=True)


        sample_name = sample_names[0]
        cpop_thres = thres_dict[sample_name]

        if suff == "json":
            sys.stderr.write("JSON output only available when -fclim is off.\n")
        elif suff == "tsv":
            ncpop_score_df.to_csv(outfile,sep="\t",index=False,float_format='%.3f')
        elif suff == "xlsx" or  suff == 'xls':
            ncpop_score_df.to_excel(outfile,index=False,float_format='%.3f')
        elif outfile == 'stdout':
            print  ncpop_score_df
        elif suff not in sufflist:
            sys.stderr.write("No output is created.\n")
            sys.stderr.write("Please use one of these suffixes in the output file name: svg, jpg, png, tsv, xlsx, xls.\n")


if __name__ == '__main__':
    main()
